{
    "A cpp file template": {
        "prefix": "cpp_file_template",
        "body": [
            "/*",
            " * @FileName: $TM_FILENAME",
            " * @Author: Foresc",
            " * @Date: $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            " */",
            "",
            "#include <iostream>",
            "",
            "using namespace std;",
            "",
            "int main()",
            "{",
            "    $0",
            "    return 0;",
            "}"
        ],
        "description": "A cpp file template."
    },
    "GCC Optimize": {
        "prefix" : "gcc_optimize",
        "body" : [
            "#pragma GCC optimize (\"O3\")",
            "#pragma GCC target (\"sse4\")",
            "#pragma GCC optimize(\"unroll-loops\")"
        ],
        "description" : "GCC-optimize."
    },
    "OIcontest Header" :{
        "prefix" : "OIcontest_header",
        "body" : [
            "#include <cmath>",
            "#include <vector>",
            "#include <string>",
            "#include <vector>",
            "#include <queue>",
            "#include <map>",
            "#define ll long long",
            "#define ull unsinged long long",
            "typedef pair<int,int > PII;", 
            "typedef pair<double,int> PDI;",
            "const int MOD=1e9+7;",
            "const int INF=0x3f3f3f;",
            "const double PI = 3.14159265358979323846;",
            "int dx[4]={-1,0,1,0};",
            "int dy[4]={0,1,0,-1};"
        ],
        "description" : "Header for OIcontest."
    },
    "OIcontest File Template": {
        "prefix": "OIcontest_file_template",
        "body": [
            "/*",
            " * @FileName: $TM_FILENAME",
            " * @Author: Foresc",
            " * @Date: $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            " */",
            "",
            "#include <iostream>",
            "#include <algorithm>",
            "",
            "using namespace std;",
            "",
            "void solve()",
            "{",
            "    $0",
            "}",
            "",
            "int main()",
            "{",
            "    ios::sync_with_stdio(false);",
            "    cin.tie(0);",
            "    // cout.tie(0);",
            "    int T = 1;",
            "    // cin >> T;",
            "    while(T--)",
            "    {",
            "        solve();",
            "    }",
            "    return 0;",
            "}"
        ],
        "description": "File template in algorithm compitition."
    },
    "Sort Camp Function template": {
        "prefix": "sort_camp",
        "body": [
            "bool camp(Node x, Node y)",
            "{",
            "    return $0",
            "}"
        ],
        "description": "A function template."
    },
    "QuickSort Funtion template": {
        "prefix": "quick_read",
        "body":[
            "inline bool read(long long &x)",
            "{",
            "    long long q = 0, f = 1;",
            "    char c = getchar();",
            "    if(c == EOF)",
            "        return false;",
            "    while (c < '0' || c > '9')",
            "    {",
            "        if (c == '-')",
            "            f = -1;",
            "        c = getchar();",
            "    }",
            "",
            "    while (c >= '0' && c <= '9')",
            "    {",
            "        q = (q << 3) + (q << 1) + (c ^ 48);",
            "        c = getchar();",
            "    }",
            "",
            "    x = q * f;",
            "    return true;",
            "}"
        ],
        "description": "A QuickRead template."
    },
    "CTimer Class template": {
        "prefix": "ctimer_body",
        "body": [
            "#include <windows.h>",
            "class CTimer",
            "{",
            "public:",
            "    inline CTimer( void )",
            "    {",
            "        QueryPerformanceFrequency( (LARGE_INTEGER*)&m_nFreq );",
            "        QueryPerformanceCounter( (LARGE_INTEGER*)&m_nStart );",
            "    }",
            "    inline double Reset( void )",
            "    {",
            "        __int64 nLast = m_nStart;",
            "        QueryPerformanceCounter( (LARGE_INTEGER*)&m_nStart );",
            "        return double( m_nStart - nLast ) / (double)m_nFreq;",
            "    }",
            "    inline double Now( void ) const",
            "    {",
            "        __int64 nCurCnt;",
            "        QueryPerformanceCounter( (LARGE_INTEGER*)&nCurCnt );",
            "        return double( nCurCnt - m_nStart ) / (double)m_nFreq;",
            "    }",
            "    inline double FinishTime( void ) const",
            "    {",
            "        __int64 nCurCnt;",
            "        QueryPerformanceCounter( (LARGE_INTEGER*)&nCurCnt );",
            "        double time = double( nCurCnt - m_nStart ) / (double)m_nFreq;",
            "        cout << \"[Done]exited in \" << time << \" seconds\" << endl;",
            "    }",
            "",
            "private:",
            "    __int64 m_nFreq;",
            "    __int64 m_nStart;",
            "};"
        ],
        "description": "A CTimer template."
    }
}